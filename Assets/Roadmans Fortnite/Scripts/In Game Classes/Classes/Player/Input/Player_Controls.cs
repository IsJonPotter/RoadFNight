//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Roadmans Fortnite/Scripts/Classes/Player/Input/Player_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Controls"",
    ""maps"": [
        {
            ""name"": ""Player_Movement"",
            ""id"": ""d29f2876-7a1e-4ef8-92b2-13e12b302a2a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b39a400d-2675-4456-a197-9deaddc6f100"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""b8254e5c-356a-4ea9-8a00-e3911ccb1dc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8afa6c22-d5dd-41b8-9245-9bbc95ae3a6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""0ece4ae8-b0e1-47b9-a648-ff4f7d8f585c"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ffef0ee6-c86f-4418-aaf4-da2f1182d9f3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fcfd613b-e359-40d5-bfee-60325ddfeaca"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a53f21df-d808-46ef-a4f6-4443b5b30030"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1bf09dc1-ee93-4391-a2d7-1194af186867"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0dc8def9-38a1-4f2e-a55e-01cb733ce956"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""304b8ff2-1351-4c72-8f82-b5c70c359d73"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""40460ce7-d04b-4571-9aa8-f93f283b8055"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""453d81c1-05fe-4ac0-aac6-4ba0f8ecbb17"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1f7d450d-8cb5-4084-ae4a-450dc188b547"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3a10525-a588-4a01-8595-ea5338bd1e5d"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0813a68b-bed0-4b39-9364-d672574b32a1"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62f2699e-d980-4a16-aa72-f74d556459ab"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a28cc7d-1e2e-444b-83e7-95977e3be92a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player_Actions"",
            ""id"": ""d3372739-3f01-46b1-9a2d-e36178bf9104"",
            ""actions"": [
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""28af36b0-c569-4cf7-8cd1-5d6fe1c6b6a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""d743e85e-a3db-49ab-bac5-2821cb4a094e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""320a5cd6-b196-40d5-9f3c-990c23c131bf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46c23743-945d-425d-a778-a5e37a3f4987"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76bdd516-b673-489c-9c95-515fd788a537"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54c74c6e-c9ef-4693-869f-e333d87c9edb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player_UI_Actions"",
            ""id"": ""a142004c-9bbe-4ba4-bc02-0b647cf1ebdb"",
            ""actions"": [
                {
                    ""name"": ""EmoteWheel"",
                    ""type"": ""Button"",
                    ""id"": ""085c0d19-41a8-4502-9e50-8086d3bfff64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponWheel"",
                    ""type"": ""Button"",
                    ""id"": ""8442c8a1-a162-4ed6-8bfc-c523dda0e9ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""bb3a8d51-a372-4dce-a2a9-17b6350ab232"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""89acffde-4874-4e5a-b1b1-2e59378d0bfa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7efc92fd-8635-409b-8756-43690baddded"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""EmoteWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53735b4f-80c3-40ec-8065-79ee794ad838"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""EmoteWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c559d7d6-947c-44ca-a62c-708d2e92d496"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""WeaponWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d66a9b3-515d-44f0-8d63-03d63aff02f8"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""WeaponWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a053148-2bf5-442f-be35-c2e9755e6f9a"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ada29f0f-8925-4dcd-a625-f469197bd662"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a4f7b4a-26cc-4f53-a231-65072781b4a2"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c865c746-b202-400f-ae98-e31e7babcdf8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player_Camera_Movement"",
            ""id"": ""5ec97f43-0933-496e-9244-a3669fe52020"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""b717ca2f-93a8-42d3-9166-959bbc54f348"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f0fff32-8059-4ed2-8cb1-cb3339b20e1f"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec72bc1f-f022-4e00-87c4-6048fcdfe8f0"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),StickDeadzone,ScaleVector2(x=300,y=300)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""PS4 Controller"",
            ""bindingGroup"": ""PS4 Controller"",
            ""devices"": []
        },
        {
            ""name"": ""Xbox Controller"",
            ""bindingGroup"": ""Xbox Controller"",
            ""devices"": []
        }
    ]
}");
        // Player_Movement
        m_Player_Movement = asset.FindActionMap("Player_Movement", throwIfNotFound: true);
        m_Player_Movement_Move = m_Player_Movement.FindAction("Move", throwIfNotFound: true);
        m_Player_Movement_Sprint = m_Player_Movement.FindAction("Sprint", throwIfNotFound: true);
        m_Player_Movement_Jump = m_Player_Movement.FindAction("Jump", throwIfNotFound: true);
        // Player_Actions
        m_Player_Actions = asset.FindActionMap("Player_Actions", throwIfNotFound: true);
        m_Player_Actions_Aim = m_Player_Actions.FindAction("Aim", throwIfNotFound: true);
        m_Player_Actions_Shoot = m_Player_Actions.FindAction("Shoot", throwIfNotFound: true);
        // Player_UI_Actions
        m_Player_UI_Actions = asset.FindActionMap("Player_UI_Actions", throwIfNotFound: true);
        m_Player_UI_Actions_EmoteWheel = m_Player_UI_Actions.FindAction("EmoteWheel", throwIfNotFound: true);
        m_Player_UI_Actions_WeaponWheel = m_Player_UI_Actions.FindAction("WeaponWheel", throwIfNotFound: true);
        m_Player_UI_Actions_Inventory = m_Player_UI_Actions.FindAction("Inventory", throwIfNotFound: true);
        m_Player_UI_Actions_Menu = m_Player_UI_Actions.FindAction("Menu", throwIfNotFound: true);
        // Player_Camera_Movement
        m_Player_Camera_Movement = asset.FindActionMap("Player_Camera_Movement", throwIfNotFound: true);
        m_Player_Camera_Movement_Look = m_Player_Camera_Movement.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Movement
    private readonly InputActionMap m_Player_Movement;
    private List<IPlayer_MovementActions> m_Player_MovementActionsCallbackInterfaces = new List<IPlayer_MovementActions>();
    private readonly InputAction m_Player_Movement_Move;
    private readonly InputAction m_Player_Movement_Sprint;
    private readonly InputAction m_Player_Movement_Jump;
    public struct Player_MovementActions
    {
        private @Player_Controls m_Wrapper;
        public Player_MovementActions(@Player_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Movement_Move;
        public InputAction @Sprint => m_Wrapper.m_Player_Movement_Sprint;
        public InputAction @Jump => m_Wrapper.m_Player_Movement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Player_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_MovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_MovementActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPlayer_MovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPlayer_MovementActions instance)
        {
            if (m_Wrapper.m_Player_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_MovementActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_MovementActions @Player_Movement => new Player_MovementActions(this);

    // Player_Actions
    private readonly InputActionMap m_Player_Actions;
    private List<IPlayer_ActionsActions> m_Player_ActionsActionsCallbackInterfaces = new List<IPlayer_ActionsActions>();
    private readonly InputAction m_Player_Actions_Aim;
    private readonly InputAction m_Player_Actions_Shoot;
    public struct Player_ActionsActions
    {
        private @Player_Controls m_Wrapper;
        public Player_ActionsActions(@Player_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Aim => m_Wrapper.m_Player_Actions_Aim;
        public InputAction @Shoot => m_Wrapper.m_Player_Actions_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_Player_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_ActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_ActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_ActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_ActionsActionsCallbackInterfaces.Add(instance);
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IPlayer_ActionsActions instance)
        {
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IPlayer_ActionsActions instance)
        {
            if (m_Wrapper.m_Player_ActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_ActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_ActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_ActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_ActionsActions @Player_Actions => new Player_ActionsActions(this);

    // Player_UI_Actions
    private readonly InputActionMap m_Player_UI_Actions;
    private List<IPlayer_UI_ActionsActions> m_Player_UI_ActionsActionsCallbackInterfaces = new List<IPlayer_UI_ActionsActions>();
    private readonly InputAction m_Player_UI_Actions_EmoteWheel;
    private readonly InputAction m_Player_UI_Actions_WeaponWheel;
    private readonly InputAction m_Player_UI_Actions_Inventory;
    private readonly InputAction m_Player_UI_Actions_Menu;
    public struct Player_UI_ActionsActions
    {
        private @Player_Controls m_Wrapper;
        public Player_UI_ActionsActions(@Player_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @EmoteWheel => m_Wrapper.m_Player_UI_Actions_EmoteWheel;
        public InputAction @WeaponWheel => m_Wrapper.m_Player_UI_Actions_WeaponWheel;
        public InputAction @Inventory => m_Wrapper.m_Player_UI_Actions_Inventory;
        public InputAction @Menu => m_Wrapper.m_Player_UI_Actions_Menu;
        public InputActionMap Get() { return m_Wrapper.m_Player_UI_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_UI_ActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_UI_ActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_UI_ActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_UI_ActionsActionsCallbackInterfaces.Add(instance);
            @EmoteWheel.started += instance.OnEmoteWheel;
            @EmoteWheel.performed += instance.OnEmoteWheel;
            @EmoteWheel.canceled += instance.OnEmoteWheel;
            @WeaponWheel.started += instance.OnWeaponWheel;
            @WeaponWheel.performed += instance.OnWeaponWheel;
            @WeaponWheel.canceled += instance.OnWeaponWheel;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        private void UnregisterCallbacks(IPlayer_UI_ActionsActions instance)
        {
            @EmoteWheel.started -= instance.OnEmoteWheel;
            @EmoteWheel.performed -= instance.OnEmoteWheel;
            @EmoteWheel.canceled -= instance.OnEmoteWheel;
            @WeaponWheel.started -= instance.OnWeaponWheel;
            @WeaponWheel.performed -= instance.OnWeaponWheel;
            @WeaponWheel.canceled -= instance.OnWeaponWheel;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        public void RemoveCallbacks(IPlayer_UI_ActionsActions instance)
        {
            if (m_Wrapper.m_Player_UI_ActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_UI_ActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_UI_ActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_UI_ActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_UI_ActionsActions @Player_UI_Actions => new Player_UI_ActionsActions(this);

    // Player_Camera_Movement
    private readonly InputActionMap m_Player_Camera_Movement;
    private List<IPlayer_Camera_MovementActions> m_Player_Camera_MovementActionsCallbackInterfaces = new List<IPlayer_Camera_MovementActions>();
    private readonly InputAction m_Player_Camera_Movement_Look;
    public struct Player_Camera_MovementActions
    {
        private @Player_Controls m_Wrapper;
        public Player_Camera_MovementActions(@Player_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Player_Camera_Movement_Look;
        public InputActionMap Get() { return m_Wrapper.m_Player_Camera_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_Camera_MovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_Camera_MovementActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_Camera_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_Camera_MovementActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IPlayer_Camera_MovementActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IPlayer_Camera_MovementActions instance)
        {
            if (m_Wrapper.m_Player_Camera_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_Camera_MovementActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_Camera_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_Camera_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_Camera_MovementActions @Player_Camera_Movement => new Player_Camera_MovementActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_PS4ControllerSchemeIndex = -1;
    public InputControlScheme PS4ControllerScheme
    {
        get
        {
            if (m_PS4ControllerSchemeIndex == -1) m_PS4ControllerSchemeIndex = asset.FindControlSchemeIndex("PS4 Controller");
            return asset.controlSchemes[m_PS4ControllerSchemeIndex];
        }
    }
    private int m_XboxControllerSchemeIndex = -1;
    public InputControlScheme XboxControllerScheme
    {
        get
        {
            if (m_XboxControllerSchemeIndex == -1) m_XboxControllerSchemeIndex = asset.FindControlSchemeIndex("Xbox Controller");
            return asset.controlSchemes[m_XboxControllerSchemeIndex];
        }
    }
    public interface IPlayer_MovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IPlayer_ActionsActions
    {
        void OnAim(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
    public interface IPlayer_UI_ActionsActions
    {
        void OnEmoteWheel(InputAction.CallbackContext context);
        void OnWeaponWheel(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
    public interface IPlayer_Camera_MovementActions
    {
        void OnLook(InputAction.CallbackContext context);
    }
}
